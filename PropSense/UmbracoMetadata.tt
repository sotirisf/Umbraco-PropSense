<#@ template language="C#" hostspecific="True" debug="True" #>
<#@ output extension="cs" #>
<#@ include file="include/UmbracoData.tt" #>
<#
    // <copyright file="UmbracoMetadata.tt" company="www.dot-see.com">
    //  Copyright © George J. Capnias (@gcapnias) & Sotiris Filippidis (@sfilip). All Rights Reserved.
    // </copyright>

    IServiceProvider hostServiceProvider = (IServiceProvider)this.Host;
    SettingsManager config = new SettingsManager(hostServiceProvider);

    string DataProvider = config.ConnectionStrings["umbracoDbDSN"].ProviderName;
    string ConnectionString = config.ConnectionStrings["umbracoDbDSN"].ConnectionString;

	if (DataProvider.Equals("System.Data.SqlServerCe.4.0")) {
		ConnectionString = ConnectionString.Replace("|DataDirectory|", string.Format("{0}\\App_Data", config.ProjectPath));
	}

    this.WriteLine("//------------------------------------------------------------------------------");
    this.WriteLine("// <auto-generated>");
    this.WriteLine("//     This code was generated from a template.");
    this.WriteLine("//");
    this.WriteLine("//     Manual changes to this file may cause unexpected behavior in your application.");
    this.WriteLine("//     Manual changes to this file will be overwritten if the code is regenerated.");
    this.WriteLine("// </auto-generated>");
    this.WriteLine("//------------------------------------------------------------------------------");
    this.WriteLine("");
    this.WriteLine("using System;");
    this.WriteLine("");

    UmbracoData cntrl = new UmbracoData();
    cntrl.Initialize(DataProvider, ConnectionString);

    this.ClearIndent();
    this.WriteLine("namespace DotSee.PropSense");
    this.WriteLine("{");
    this.PushIndent("\t");

    foreach (string documentName in cntrl.DocumentNames)
    {
        Stack<int> inheritance = new Stack<int>();

        DocumentType field = cntrl.Types.Where(m => m.TypeName == documentName).FirstOrDefault();
        if (field != null)
        {
            inheritance.Push(field.ContentTypeId);

            var parents = cntrl.Relations.Where(m => m.ContentTypeId == field.ContentTypeId).ToList();
            if (parents != null && parents.Count > 0)
            {
                foreach (var parent in parents)
                {
                    inheritance.Push(parent.ParentContentTypeId);
                }
            }
        }

        List<DocumentType> fields = new List<DocumentType>();
        while (inheritance.Count > 0)
        {
            int documentType = inheritance.Pop();
            fields.AddRange(cntrl.Types.Where(m => m.ContentTypeId == documentType && m.Alias != null));
        }

        this.WriteLine("");
        this.WriteLine(string.Format("public static class Psn_{0}", documentName));
        this.WriteLine("{");
        this.PushIndent("\t");
       
        this.WriteLine(string.Format("public const string TypeName = \"{0}\";", documentName));

        for (int i = 0; i < fields.Count; i++)
        {
            //this.WriteLine("/// <summary>");
            //this.WriteLine(string.Format("/// {0}", fields[i].DisplayName));
            //this.WriteLine("/// </summary>");
            this.WriteLine(string.Format("public const string {0} = \"{0}\";", fields[i].Alias));
        }

        this.PopIndent();
        this.WriteLine("}");

    }

    this.PopIndent();
    this.WriteLine("}");
    this.WriteLine("");

#>
